Things to do for 1.0.0 
========================= 

py.test 
--------------

- clarify setup/run events and runner.py versus pytest_runner.py, 
  introduce a general pytest_item_setup(item, setupstate)
  and always isolate py._com.comregistry when py lib's own tests are run

- hook review and hook docs 

- turn deprecation / apiwarnings into events, report them at the end? 

- nightly test runs on multiple platforms 

py.execnet
--------------

- cross-python version (2.2/2.3-2.5/6) and cross-platform testing of 
  setup/teardown semantics

py.test apigen plugin
---------------------------

- make it work again with the new plugin arch

packaging / svn-mercurial interaction
--------------------------------------------

- decide if to go with or without setuptools, check windows 2.6
  availability 

- open a mercurial branch for releases? 

- write a script to dumb-bridge the mercurial repo to svn 
  (i.e. forget about svn history)

1.1 and beyond 
=================================

refactorings
------------------

- refine doctests usage (particularly skips of doctests if
  some imports/conditions are not satisfied) 
  - check if it works on win32 
  - refine error reporting (don't show python tracebacks) 

- py.log: unify API, possibly deprecate duplicate ones, 
  base things on a Config object  (hte latter almost a feature though) 
  (M988)

- see to teardown more eagerly

features 
--------------

- (Harald Armin Massa): make py2exe work with py lib 

- optimize file checking with --looponfailing (harald has code for win32)

- have a py.test scan/run database for results and test names
  etc. (to allow quicker selection of tests and post-run 
  information on failures etc.)  (M760) 

- have config options from environment, command line or conftest's

  have py/doc/config/"OPTNAME".txt for each option pypy-style 

  py.test --showconfig  shows current configuration according
     to envvars, cmdlineopts and conftests considered for your dir location. 
        
  py.test --help-conftest lists all possible environment envs 
  py.test --help-env lists all possible environment envs 

- consider features of py.apigen (recheck closed "M1016")

- integrate rlcompleter2 (make it remotely workable) 
  and maybe integrate with "pdb" / pdbplus (M975) 

- integrate native collecting of unittest.py tests from py.test 
  (along the PyPy lib-python tests)  (M987) 

- provide an automated conversion script helper for converting
  unittest.py based tests to py.test ones. (M987)

- references from ReST docs to modules, functions and classes
  of apigen generated html docs (M960)

- py.test.pdb - there is my hack for a while now, which integrates
  rlcompleter2 with pdb. First of all it requires some strange changes
  to rlcompleter itself, which has no tests. Long-term plan would be
  to have pyrepl+rlcompleter2+pdb fixes integrated into pylib and
  have it tested. This requires work though.
